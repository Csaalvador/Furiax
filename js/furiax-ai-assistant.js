const STORAGE_KEYS = {
    CHAT_HISTORY: 'furiax_chat_history',
    USER_ENGAGEMENT: 'furiax_user_engagement'
};

const AI_CONFIG = {
    NAME: 'FURIA Intelligence',
    DEFAULT_GREETING: 'OlÃ¡! Eu sou a IA da FURIA. Como posso ajudar vocÃª hoje?',
    TYPING_SPEED: 50,
    MAX_HISTORY: 50,
    PERSONALITIES: {
        DEFAULT: 'assistant',
        ART: 'art',
        KSCERATO: 'kscerato',
        COACH: 'coach'
    },
    CURRENT_PERSONALITY: 'assistant'
};

let chatState = {
    isOpen: false,
    isTyping: false,
    history: [],
    typingTimeout: null,
    activePersonality: AI_CONFIG.PERSONALITIES.DEFAULT
};

document.addEventListener('DOMContentLoaded', () => {
    initAIAssistant();
    createParticles();
    setupEventListeners();
});

function createParticles() {
    const particlesContainer = document.getElementById('particles');
    if (!particlesContainer) return;
    
    const numParticles = 20;
    
    for (let i = 0; i < numParticles; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        const size = Math.random() * 15 + 5;
        particle.style.width = `${size}px`;
        particle.style.height = `${size}px`;
        
        particle.style.left = `${Math.random() * 100}%`;
        particle.style.top = `${Math.random() * 100}%`;
        
        const duration = Math.random() * 20 + 10;
        particle.style.animationDuration = `${duration}s`;
        
        const delay = Math.random() * 10;
        particle.style.animationDelay = `${delay}s`;
        
        const opacity = Math.random() * 0.4 + 0.1;
        particle.style.opacity = opacity;
        
        particlesContainer.appendChild(particle);
    }
}

function setupEventListeners() {
    const mainChatBtn = document.getElementById('mainChatBtn');
    if (mainChatBtn) {
        mainChatBtn.addEventListener('click', () => {
            const chatModal = document.getElementById('aiChatModal');
            if (chatModal) {
                chatModal.classList.add('active');
                chatState.isOpen = true;
                updateChatUI();
                
                setTimeout(() => {
                    const input = document.getElementById('aiInput');
                    if (input) input.focus();
                }, 300);
            }
        });
    }
    
    const badges = document.querySelectorAll('.furia-badge');
    badges.forEach(badge => {
        badge.addEventListener('click', () => {
            const personality = badge.dataset.personality;
            if (personality) {
                chatState.activePersonality = personality;
                
                const chatModal = document.getElementById('aiChatModal');
                if (chatModal) {
                    chatModal.classList.add('active');
                    chatState.isOpen = true;
                    
                    let personalityName;
                    switch(personality) {
                        case 'art': personalityName = 'arT (CapitÃ£o)'; break;
                        case 'kscerato': personalityName = 'KSCERATO'; break;
                        case 'coach': personalityName = 'Coach FURIA'; break;
                        default: personalityName = 'Assistente FURIA';
                    }
                    
                    chatState.history = [];
                    
                    addSystemMessage(`VocÃª estÃ¡ conversando com: ${personalityName}`);
                    
                    const greeting = getPersonalityGreeting(personality);
                    addBotMessage(greeting, personality);
                    
                    updateChatUI();
                    
                    setTimeout(() => {
                        const input = document.getElementById('aiInput');
                        if (input) input.focus();
                    }, 300);
                }
            }
        });
    });
}

function initAIAssistant() {
    chatState.history = getFromStorage(STORAGE_KEYS.CHAT_HISTORY, [
        {
            isBot: true,
            message: AI_CONFIG.DEFAULT_GREETING,
            timestamp: Date.now(),
            personality: AI_CONFIG.PERSONALITIES.DEFAULT
        }
    ]);
    
    setupAIChatEventListeners();
}

function setupAIChatEventListeners() {
    const chatTrigger = document.getElementById('aiChatTrigger');
    const chatModal = document.getElementById('aiChatModal');
    const chatClose = document.getElementById('aiChatClose');
    const chatInput = document.getElementById('aiInput');
    const sendButton = document.getElementById('aiSendBtn');
    
    if (chatTrigger && chatModal) {
        chatTrigger.addEventListener('click', () => {
            chatModal.classList.add('active');
            chatState.isOpen = true;
            
            updateChatUI();
            
            setTimeout(() => {
                if (chatInput) chatInput.focus();
            }, 300);
        });
    }
    
    if (chatClose && chatModal) {
        chatClose.addEventListener('click', () => {
            chatModal.classList.remove('active');
            chatState.isOpen = false;
        });
    }
    
    if (chatInput && sendButton) {
        sendButton.addEventListener('click', () => {
            sendChatMessage();
        });
        
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendChatMessage();
            }
        });
    }
    
    const suggestionChips = document.querySelectorAll('.suggestion-chip');
    suggestionChips.forEach(chip => {
        chip.addEventListener('click', () => {
            const input = document.getElementById('aiInput');
            if (input) {
                input.value = chip.textContent.trim();
                input.focus();
            }
        });
        
        chip.addEventListener('mouseover', () => {
            chip.style.transform = 'translateY(-2px)';
            chip.style.boxShadow = '0 2px 5px rgba(30, 144, 255, 0.2)';
        });
        
        chip.addEventListener('mouseout', () => {
            chip.style.transform = 'translateY(0)';
            chip.style.boxShadow = 'none';
        });
    });
}

function getPersonalityGreeting(personality) {
    switch(personality) {
        case 'art':
            return "Fala aÃ­! arT na Ã¡rea. CapitÃ£o da FURIA pronto pra trocar ideia. Pode perguntar sobre CS, tÃ¡ticas ou qualquer coisa do nosso time! ðŸ”«";
        case 'kscerato':
            return "OlÃ¡! Aqui Ã© o KSCERATO. Estou disponÃ­vel para responder suas perguntas sobre a FURIA e conversar sobre CS. Como posso ajudar?";
        case 'coach':
            return "Boa! Aqui Ã© o Coach da FURIA. Vamos falar sobre estratÃ©gias, preparaÃ§Ã£o e como levamos nosso time ao prÃ³ximo nÃ­vel? Estou aqui para compartilhar conhecimento.";
        default:
            return AI_CONFIG.DEFAULT_GREETING;
    }
}

function sendChatMessage() {
    const input = document.getElementById('aiInput');
    if (!input) return;
    
    const messageText = input.value.trim();
    
    if (!messageText || chatState.isTyping) return;
    
    addUserMessage(messageText);
    
    input.value = '';
    
    simulateBotResponse(messageText);
    
    saveToStorage(STORAGE_KEYS.CHAT_HISTORY, chatState.history);
    
    updateChatUI();
}

function addUserMessage(message) {
    chatState.history.push({
        isBot: false,
        message: message,
        timestamp: Date.now()
    });
    
    if (chatState.history.length > AI_CONFIG.MAX_HISTORY) {
        chatState.history.shift();
    }
}

function addBotMessage(message, personality = null) {
    const activePers = personality || chatState.activePersonality;
    
    chatState.history.push({
        isBot: true,
        message: message,
        timestamp: Date.now(),
        personality: activePers
    });
    
    if (chatState.history.length > AI_CONFIG.MAX_HISTORY) {
        chatState.history.shift();
    }
}

function addSystemMessage(message) {
    chatState.history.push({
        isBot: true,
        isSystem: true,
        message: message,
        timestamp: Date.now()
    });
    
    if (chatState.history.length > AI_CONFIG.MAX_HISTORY) {
        chatState.history.shift();
    }
}

function simulateBotResponse(userMessage) {
    showTypingIndicator();
    
    const response = generateBotResponse(userMessage, chatState.activePersonality);
    
    const typingTime = Math.min(3000, Math.max(800, response.length / AI_CONFIG.TYPING_SPEED * 1000));
    
    chatState.typingTimeout = setTimeout(() => {
        hideTypingIndicator();
        addBotMessage(response, chatState.activePersonality);
        updateChatUI();
        
        saveToStorage(STORAGE_KEYS.CHAT_HISTORY, chatState.history);
        
        scrollToBottom();
        
        updateUserEngagement('chat_message', 1);
    }, typingTime);
}

function showTypingIndicator() {
    chatState.isTyping = true;
    
    const messagesContainer = document.getElementById('aiChatMessages');
    if (!messagesContainer) return;
    
    if (messagesContainer.querySelector('.typing-indicator')) return;
    
    const indicator = document.createElement('div');
    indicator.className = 'typing-indicator';
    indicator.innerHTML = `
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
    `;
    
    messagesContainer.appendChild(indicator);
    
    scrollToBottom();
}

function hideTypingIndicator() {
    chatState.isTyping = false;
    
    const indicator = document.querySelector('.typing-indicator');
    if (indicator) {
        indicator.remove();
    }
}

function scrollToBottom() {
    const messagesContainer = document.getElementById('aiChatMessages');
    if (messagesContainer) {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
}

function updateChatUI() {
    const messagesContainer = document.getElementById('aiChatMessages');
    if (!messagesContainer) return;
    
    messagesContainer.innerHTML = '';
    
    chatState.history.forEach(message => {
        if (message.isSystem) {
            const systemElement = document.createElement('div');
            systemElement.className = 'system-message';
            systemElement.textContent = message.message;
            messagesContainer.appendChild(systemElement);
        } else {
            const messageElement = document.createElement('div');
            messageElement.className = `ai-message ${message.isBot ? 'incoming' : 'outgoing'}`;
            
            if (message.isBot && message.personality && message.personality !== 'assistant') {
                let avatarIcon;
                let avatarColor;
                
                switch(message.personality) {
                    case 'art':
                        avatarIcon = 'fas fa-crosshairs';
                        avatarColor = '#ff3b5c';
                        break;
                    case 'kscerato':
                        avatarIcon = 'fas fa-crown';
                        avatarColor = '#ffc107';
                        break;
                    case 'coach':
                        avatarIcon = 'fas fa-chalkboard-teacher';
                        avatarColor = '#00cc66';
                        break;
                    default:
                        avatarIcon = 'fas fa-robot';
                        avatarColor = '#1e90ff';
                }
                
                messageElement.innerHTML = `
                    <div style="display: flex; align-items: flex-start; gap: 8px;">
                        <div style="width: 24px; height: 24px; min-width: 24px; background: ${avatarColor}; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-top: 2px;">
                            <i class="${avatarIcon}" style="font-size: 0.8rem; color: white;"></i>
                        </div>
                        <div>${formatMessageWithLinks(message.message)}</div>
                    </div>
                `;
            } else {
                messageElement.innerHTML = formatMessageWithLinks(message.message);
            }
            
            messagesContainer.appendChild(messageElement);
        }
    });
    
    scrollToBottom();
}

function formatMessageWithLinks(text) {
    const urlRegex = /(https?:\/\/[^\s]+)/g;
    const withLinks = text.replace(urlRegex, url => `<a href="${url}" target="_blank" style="color: #1e90ff; text-decoration: underline;">${url}</a>`);
    
    const hashtagRegex = /#([a-zA-Z0-9_]+)/g;
    return withLinks.replace(hashtagRegex, (match, tag) => 
        `<a href="javascript:void(0)" onclick="filterFeedByTag('${tag}')" style="color: #1e90ff; text-decoration: underline;">${match}</a>`
    );
}

function filterFeedByTag(tag) {
    alert(`Filtrando feed pela tag: #${tag}`);
}

function generateBotResponse(userMessage, personalityType) {
    const lowerMessage = userMessage.toLowerCase();
    
    switch(personalityType) {
        case 'art':
            return generateArtResponse(lowerMessage);
        case 'kscerato':
            return generateKsceratoResponse(lowerMessage);
        case 'coach':
            return generateCoachResponse(lowerMessage);
        default:
            return generateDefaultResponse(lowerMessage);
    }
}

function generateDefaultResponse(lowerMessage) {
    if (lowerMessage.includes('prÃ³ximo jogo') || lowerMessage.includes('quando joga') || lowerMessage.includes('prÃ³ximo match')) {
        return "O prÃ³ximo jogo da FURIA serÃ¡ quinta-feira Ã s 15h contra a Liquid no torneio BLAST Premier! SerÃ¡ transmitido nos canais oficiais da BLAST e do time. Vai ser fogo! ðŸ”¥";
    }
    
    if (lowerMessage.includes('jogadores') || lowerMessage.includes('line-up') || lowerMessage.includes('elenco') || lowerMessage.includes('time')) {
        return "O atual line-up da FURIA CS:GO Ã©: arT (AWPer/CapitÃ£o), KSCERATO (Rifler), yuurih (Rifler), saffee (Rifler), drop (Rifler) e tacitus (Coach). Um time incrÃ­vel com muito talento brasileiro!";
    }
    
    if (lowerMessage.includes('major') || lowerMessage.includes('campeonato')) {
        return "O prÃ³ximo Major de CS2 serÃ¡ em trÃªs meses e a FURIA jÃ¡ estÃ¡ classificada! A equipe estÃ¡ em bootcamp intensivo para representar o Brasil da melhor forma possÃ­vel. As expectativas estÃ£o altÃ­ssimas apÃ³s os Ãºltimos resultados!";
    }
    
    if (lowerMessage.includes('art') || lowerMessage.includes('capitÃ£o')) {
        return "Andrei \"arT\" Piovezan Ã© o capitÃ£o e AWPer da FURIA. Conhecido pelo seu estilo agressivo e arriscado, ele Ã© um dos jogadores mais criativos e carismÃ¡ticos do cenÃ¡rio. Sua lideranÃ§a dentro e fora do jogo Ã© fundamental para o sucesso da equipe!";
    }
    
    if (lowerMessage.includes('kscerato')) {
        return "Kaike \"KSCERATO\" Cerato Ã© um dos riflers da FURIA. Considerado um dos melhores jogadores do mundo, ele tem uma mira incrÃ­vel e uma consciÃªncia tÃ¡tica excepcional. Sua consistÃªncia Ã© impressionante, mantendo sempre alto nÃ­vel nas competiÃ§Ãµes!";
    }
    
    if (lowerMessage.includes('loja') || lowerMessage.includes('comprar') || lowerMessage.includes('produto') || lowerMessage.includes('camisa')) {
        return "VocÃª pode encontrar todos os produtos oficiais da FURIA na nossa loja virtual: furiagg.com/loja. Temos camisetas, moletons, mousepads e muito mais! JÃ¡ viu a nova coleÃ§Ã£o que estÃ¡ chegando para o Major? ðŸ›’";
    }
    
    if (lowerMessage.includes('evento') || lowerMessage.includes('encontro') || lowerMessage.includes('meet') || lowerMessage.includes('presencial')) {
        return "Teremos um encontro de fÃ£s em SÃ£o Paulo no prÃ³ximo fim de semana! Vai ser no Shopping Eldorado, das 14h Ã s 20h, com sessÃµes de autÃ³grafos, fotos com os jogadores e muito mais! Confira todos os detalhes na aba Eventos da plataforma FURIAX!";
    }
    
    if (lowerMessage.includes('valorant') || lowerMessage.includes('val')) {
        return "A FURIA tambÃ©m tem um time feminino de VALORANT super competitivo! As meninas tÃªm mostrado um desempenho incrÃ­vel nos torneios recentes e estÃ£o entre as melhores equipes da AmÃ©rica Latina. Acompanhe as partidas nos canais oficiais!";
    }
    
    if (lowerMessage.includes('obrigado') || lowerMessage.includes('valeu') || lowerMessage.includes('thanks')) {
        return "Por nada! Sempre Ã  disposiÃ§Ã£o para ajudar os fÃ£s da FURIA! Se tiver mais perguntas, Ã© sÃ³ chamar. #SomosFURIA ðŸ”µâš«";
    }
    
    if (lowerMessage.includes('quem Ã© vocÃª') || lowerMessage.includes('o que vocÃª Ã©') || lowerMessage.includes('quem vocÃª')) {
        return "Eu sou a IA da FURIA, criada para ajudar os fÃ£s com informaÃ§Ãµes sobre o time, jogadores, eventos e muito mais! FaÃ§o parte da plataforma FURIAX, que visa conectar a comunidade de fÃ£s da melhor forma possÃ­vel. Como posso te ajudar hoje?";
    }

    if (lowerMessage.includes('olÃ¡') || lowerMessage.includes('oi') || lowerMessage.includes('e aÃ­') || lowerMessage.includes('fala')) {
        return "Oi! Eu sou a IA da FURIA. Como posso ajudar vocÃª hoje?";
    }
    if(lowerMessage.includes('help') || lowerMessage.includes('ajuda') || lowerMessage.includes('socorro')) {
        return "Os comandos sÃ£o \n: OlÃ¡, \nprÃ³ximo jogo, \njogadores, \nmajor, \nloja, \nevento, \nVALORANT, \nobrigado, \nquem Ã© vocÃª, \nolÃ¡, \noi, \ne aÃ­ ou fala. VocÃª pode perguntar sobre qualquer coisa relacionada Ã  FURIA!";
    }   
    
    
    const generalResponses = [
        "A FURIA estÃ¡ em constante evoluÃ§Ã£o para se manter entre as melhores equipes do mundo! Temos grandes expectativas para os prÃ³ximos torneios. O que mais vocÃª gostaria de saber sobre o time?",
        "Nossa comunidade de fÃ£s Ã© uma das mais apaixonadas do cenÃ¡rio de esports! O que mais vocÃª gostaria de saber sobre a FURIA?",
        "Estamos trabalhando em novidades incrÃ­veis para os fÃ£s! Fique ligado nas redes sociais e aqui na plataforma FURIAX para nÃ£o perder nenhuma atualizaÃ§Ã£o. Tem algo especÃ­fico que vocÃª gostaria de saber?",
        "Os treinos da equipe estÃ£o a todo vapor para as prÃ³ximas competiÃ§Ãµes! Nosso objetivo Ã© sempre buscar a melhor performance possÃ­vel. Em que mais posso ajudar vocÃª?",
        "A FURIA valoriza muito o apoio dos fÃ£s! VocÃªs sÃ£o parte fundamental do sucesso da equipe. Como mais posso te ajudar hoje?"
    ];
    
    return generalResponses[Math.floor(Math.random() * generalResponses.length)];
}

function generateArtResponse(message) {
    if (message.includes('prÃ³ximo jogo') || message.includes('quando joga')) {
        return "Fala mano! Nosso prÃ³ximo jogo Ã© quinta contra a Liquid. Estamos na preparaÃ§Ã£o forte, revisando demos e treinando. Vai ser um jogÃ£o! Tu vai assistir?";
    }
    
    if (message.includes('tÃ¡tica') || message.includes('estratÃ©gia')) {
        return "Como IGL, sempre tento inovar nas tÃ¡ticas. Ã€s vezes a galera acha que sou maluco, mas tem mÃ©todo na loucura! ðŸ˜‚ A gente tÃ¡ sempre tentando surpreender os adversÃ¡rios com jogadas diferentes. TÃ´ sempre bolando coisas novas nos treinos.";
    }
    
    if (message.includes('awp') || message.includes('sniper')) {
        return "Mano, AWP Ã© minha paixÃ£o! Sei que meu estilo Ã© agressivo pra caramba, nÃ£o sou o AWPer convencional. Gosto de ser imprevisÃ­vel, fazer jogadas que ninguÃ©m espera. Ã€s vezes dÃ¡ errado, mas quando dÃ¡ certo... ðŸ”¥";
    }
    
    if (message.includes('conselho') || message.includes('dica')) {
        return "Dica de quem tÃ¡ no jogo hÃ¡ tempo: treina sua comunicaÃ§Ã£o e joga em equipe. CS nÃ£o Ã© sÃ³ mira. Ã‰ decisÃ£o rÃ¡pida, timing, conhecer os mapas. E confia na tua game sense - Ã s vezes tem que sentir o jogo, nÃ£o dÃ¡ pra explicar. Ã‰ coisa de milhares de horas jogando.";
    }

    if (message.includes('olÃ¡') || message.includes('oi') || message.includes('e aÃ­') || message.includes('fala')) {
        return "Fala aÃ­! arT na Ã¡rea. Como que tÃ¡? Pode perguntar qualquer coisa sobre CS ou sobre o time!";
    }

    if(message.includes('help') || message.includes('ajuda') || message.includes('socorro')) {
        return "Os comandos sÃ£o: OlÃ¡, prÃ³ximo jogo, jogadores, major, loja, evento, VALORANT, obrigado, quem Ã© vocÃª, olÃ¡, oi, e aÃ­ ou fala. VocÃª pode perguntar sobre qualquer coisa relacionada Ã  FURIA!";
    }

    
    const responses = [
        "Fala meu mano! O que tÃ¡ pegando? Pode perguntar qualquer coisa aÃ­ sobre o time ou CS.",
        "Estamos focados no prÃ³ximo torneio. A preparaÃ§Ã£o tÃ¡ insana, confia!",
        "CS2 tem mudado vÃ¡rias dinÃ¢micas do jogo, mas a gente tÃ¡ se adaptando rÃ¡pido. O time todo tÃ¡ evoluindo bem.",
        "Mano, essa comunidade da FURIA Ã© diferenciada demais! VocÃªs sÃ£o parte do time tambÃ©m.",
        "Bora Brasil! A gente vai representar com tudo nos prÃ³ximos campeonatos. Pode confiar!"
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
}

function generateKsceratoResponse(message) {
    if (message.includes('treino') || message.includes('prÃ¡tica')) {
        return "Minha rotina de treino Ã© bem intensa. AlÃ©m das horas com o time, sempre faÃ§o DM e workshop maps para manter a mira afiada. ConsistÃªncia vem de trabalho duro diÃ¡rio, nÃ£o tem segredo.";
    }
    
    if (message.includes('mira') || message.includes('aim')) {
        return "Sobre aim, eu foco muito em treinar micro-ajustes e spray control. Tenho uma sensibilidade relativamente baixa, o que ajuda na precisÃ£o. Mas o principal Ã© a repetiÃ§Ã£o e manter a calma nas situaÃ§Ãµes de pressÃ£o.";
    }
    
    if (message.includes('major') || message.includes('campeonato')) {
        return "Estamos muito focados para o prÃ³ximo Major. A preparaÃ§Ã£o estÃ¡ diferente dessa vez, estamos estudando muito os adversÃ¡rios. Sinto que podemos ir muito longe. O time estÃ¡ em Ã³tima forma e confiante.";
    }
    
    if (message.includes('clutch') || message.includes('1v1')) {
        return "SituaÃ§Ãµes de clutch sÃ£o sobre manter a calma e jogar com informaÃ§Ã£o. Tento sempre ter uma boa leitura do jogo e nÃ£o apressar decisÃµes. Ã‰ mais mental do que mecÃ¢nico na maioria das vezes.";
    }

    if (message.includes('olÃ¡') || message.includes('oi') || message.includes('e aÃ­') || message.includes('fala')) {
        return "OlÃ¡! Aqui Ã© o KSCERATO. Como posso ajudar vocÃª hoje? Pode perguntar sobre o time ou sobre CS.";
    }

    if(message.includes('help') || message.includes('ajuda') || message.includes('socorro')) {
        return "Os comandos sÃ£o: OlÃ¡, prÃ³ximo jogo, jogadores, major, loja, evento, VALORANT, obrigado, quem Ã© vocÃª, olÃ¡, oi, e aÃ­ ou fala. VocÃª pode perguntar sobre qualquer coisa relacionada Ã  FURIA!";
    }
    if(message.includes('help') || message.includes('ajuda') || message.includes('socorro')) {
        return "Os comandos sÃ£o: OlÃ¡, prÃ³ximo jogo, jogadores, major, loja, evento, VALORANT, obrigado, quem Ã© vocÃª, olÃ¡, oi, e aÃ­ ou fala. VocÃª pode perguntar sobre qualquer coisa relacionada Ã  FURIA!";
    }

    
    const responses = [
        "Estou sempre buscando evoluir como jogador. Cada torneio Ã© uma nova oportunidade de aprendizado.",
        "O ambiente na FURIA Ã© muito bom para desenvolvimento. Temos uma Ã³tima estrutura e staff tÃ©cnico.",
        "Representar o Brasil internacionalmente Ã© uma honra enorme. Damos o mÃ¡ximo em cada partida por vocÃªs.",
        "Valorizo muito o apoio dos fÃ£s. VocÃªs sÃ£o parte fundamental das nossas conquistas.",
        "Estamos com grandes expectativas para as prÃ³ximas competiÃ§Ãµes. O time estÃ¡ trabalhando muito."
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
}

function generateCoachResponse(message) {
    if (message.includes('treino') || message.includes('preparaÃ§Ã£o')) {
        return "Nossa metodologia de treino Ã© bastante estruturada. Dividimos entre teoria, prÃ¡tica de execuÃ§Ã£o e scrims. TambÃ©m fazemos muita anÃ¡lise de demos, tanto nossas quanto dos adversÃ¡rios. Ã‰ um processo contÃ­nuo de aprendizado e adaptaÃ§Ã£o.";
    }
    
    if (message.includes('tÃ¡tica') || message.includes('estratÃ©gia') || message.includes('mapa')) {
        return "Desenvolvemos um playbook extenso para cada mapa, com variaÃ§Ãµes de execuÃ§Ãµes e adaptaÃ§Ãµes mid-round. O diferencial da FURIA Ã© a capacidade de improvisar a partir de bases sÃ³lidas. NÃ£o queremos ser previsÃ­veis, mas tambÃ©m precisamos de estrutura.";
    }
    
    if (message.includes('adversÃ¡rio') || message.includes('time') || message.includes('oponente')) {
        return "A anÃ¡lise de adversÃ¡rios Ã© fundamental no nosso processo. Temos uma equipe dedicada a estudar padrÃµes, tendÃªncias e contra-estratÃ©gias. Cada time tem seus confortos e desconfortos, e trabalhamos para explorar isso ao mÃ¡ximo.";
    }
    
    if (message.includes('carreira') || message.includes('coach') || message.includes('tÃ©cnico')) {
        return "A carreira de coach exige uma visÃ£o macro do jogo e habilidade de comunicaÃ§Ã£o. Ã‰ preciso saber equilibrar autoridade e proximidade com os jogadores. Meu objetivo Ã© criar um ambiente onde todos possam atingir seu potencial mÃ¡ximo dentro do sistema do time.";
    }
    
    if (message.includes('olÃ¡') || message.includes('oi') || message.includes('eaÃ­') || message.includes('fala')) {
        return "Boa! Aqui Ã© o Coach da FURIA. Como posso ajudar vocÃª hoje? Vamos falar sobre estratÃ©gias e preparaÃ§Ã£o?";
    }
    if(message.includes('help') || message.includes('ajuda') || message.includes('socorro')) {
        return "Os comandos sÃ£o: OlÃ¡, prÃ³ximo jogo, jogadores, major, loja, evento, VALORANT, obrigado, quem Ã© vocÃª, olÃ¡, oi, e aÃ­ ou fala. VocÃª pode perguntar sobre qualquer coisa relacionada Ã  FURIA!";
    }

    
    const responses = [
        "O sucesso de uma equipe estÃ¡ nos detalhes. Trabalhamos constantemente para refinar cada aspecto do nosso jogo.",
        "Estamos implementando novos sistemas de jogo que serÃ£o revelados nas prÃ³ximas competiÃ§Ãµes. Acho que vÃ£o surpreender muita gente.",
        "O mental Ã© tÃ£o importante quanto a habilidade tÃ©cnica. Investimos muito em preparaÃ§Ã£o psicolÃ³gica para momentos de pressÃ£o.",
        "Nosso objetivo Ã© construir um estilo de jogo que seja adaptÃ¡vel a qualquer meta ou adversÃ¡rio. Flexibilidade Ã© chave no CS atual.",
        "A evoluÃ§Ã£o da FURIA Ã© um processo contÃ­nuo. Estamos sempre buscando novos limites e desafiando o status quo."
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
}

function getFromStorage(key, defaultValue) {
    try {
        const storedValue = localStorage.getItem(key);
        return storedValue ? JSON.parse(storedValue) : defaultValue;
    } catch (error) {
        console.error(`Erro ao ler ${key} do localStorage:`, error);
        return defaultValue;
    }
}

function saveToStorage(key, value) {
    try {
        localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
        console.error(`Erro ao salvar ${key} no localStorage:`, error);
    }
}

function updateUserEngagement(type, value) {
    try {
        const engagement = getFromStorage(STORAGE_KEYS.USER_ENGAGEMENT, {
            chat_messages: 0,
            visits: 0,
            last_visit: null,
            interests: {},
            custom: 0
        });
        
        if (type === 'visit') {
            engagement.visits += value;
            engagement.last_visit = Date.now();
        } else if (type === 'chat_message') {
            engagement.chat_messages += value;
        } else if (type === 'interest') {
            engagement.interests[value] = (engagement.interests[value] || 0) + 1;
        } else if (type === 'custom') {
            engagement.custom += value;
        }
        
        saveToStorage(STORAGE_KEYS.USER_ENGAGEMENT, engagement);
    } catch (error) {
        console.error('Erro ao atualizar engajamento:', error);
    }
}

updateUserEngagement('visit', 1);